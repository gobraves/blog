<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GoBraves Blog</title>
    <description>To be my hero</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 25 Jan 2016 20:30:39 +0800</pubDate>
    <lastBuildDate>Mon, 25 Jan 2016 20:30:39 +0800</lastBuildDate>
    <generator>Jekyll v3.1.0</generator>
    
      <item>
        <title>R language</title>
        <description>&lt;h2 id=&quot;r-language&quot;&gt;R language&lt;/h2&gt;
&lt;p&gt;###atomic class of object&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;character&lt;/li&gt;
  &lt;li&gt;numeric(double precision real number)&lt;/li&gt;
  &lt;li&gt;integer(suffix L example:1L. It’s explicitly an integer)&lt;/li&gt;
  &lt;li&gt;complex&lt;/li&gt;
  &lt;li&gt;logical&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;basic-object--vector&quot;&gt;basic object : vector&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;vector can only contain objects of the same class&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Inf(represent infinity example: 1/0)&lt;/li&gt;
  &lt;li&gt;NaN(not a number. eg: 0/0)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;attributes&quot;&gt;Attributes&lt;/h3&gt;
&lt;p&gt;R objects can have attributes
- name,dimnames
- dimensions(e.g. matrices, arrays)
- class
- length
- other user-defined attributes/metadata
attributes of an objec can be accessed using the attributes().&lt;/p&gt;

&lt;h3 id=&quot;coercion&quot;&gt;Coercion&lt;/h3&gt;
&lt;p&gt;####Implicit
Example:
- &lt;code&gt;x &amp;lt;- c(&quot;TRUE&quot;,&quot;a&quot;,123)&lt;/code&gt; –character
- &lt;code&gt;x&amp;lt;-c(TRUE,1,2,3)&lt;/code&gt; –numeric
- &lt;code&gt;x&amp;lt;-c(TRUE,1L,2L,3L)&lt;/code&gt; –integer&lt;/p&gt;

&lt;h4 id=&quot;explicit&quot;&gt;explicit&lt;/h4&gt;
&lt;p&gt;Example: &lt;code&gt;x &amp;lt;- 0:6&lt;/code&gt;
- &lt;code&gt;as.numeric(x)&lt;/code&gt;
- &lt;code&gt;as.logical(x)&lt;/code&gt;
- &lt;code&gt;as.character(x)&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;list&quot;&gt;list&lt;/h3&gt;
&lt;p&gt;a special type of vector that can contain elements of different classes&lt;/p&gt;

&lt;h3 id=&quot;matrices&quot;&gt;matrices&lt;/h3&gt;
&lt;p&gt;every element must be in the same class&lt;br /&gt;
&lt;code&gt;matrix(nrow = , ncol =  )&lt;/code&gt; &lt;br /&gt;
&lt;code&gt;dim()&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;attributes()&lt;/code&gt;&lt;br /&gt;
- upper left&lt;br /&gt;
  e.g.
  - &lt;code&gt;m &amp;lt;- matrix(1:6, nrow = 2, ncol = 3)&lt;/code&gt;
  - &lt;code&gt;m &amp;lt;- 1:6&lt;/code&gt;
    &lt;code&gt;dim(m) &amp;lt;- c(2,3)&lt;/code&gt;
- cbind() and rbind()&lt;/p&gt;

&lt;h3 id=&quot;factors&quot;&gt;Factors&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;x &amp;lt;- factor(c(&quot;yes&quot;,&quot;yes&quot;,&quot;no&quot;,&quot;yes&quot;))&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;missing-values&quot;&gt;Missing Values&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;is.na()&lt;/code&gt; NA has class&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;is.nan()&lt;/code&gt; NAN is also a NA&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;data-frame&quot;&gt;data frame&lt;/h3&gt;
&lt;p&gt;can have different classes of objects in each column&lt;br /&gt;
special attributes:
- row.names
- created by calling &lt;code&gt;read.csv()&lt;/code&gt; or &lt;code&gt;read.table()&lt;/code&gt;&lt;br /&gt;
- converted to a matrix by calling data.matrix()&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Jan 2016 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2016/01/18/R-language/</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/01/18/R-language/</guid>
        
        <category>R</category>
        
        <category>ml</category>
        
        
      </item>
    
      <item>
        <title>Ml Index</title>
        <description>&lt;ul&gt;
  &lt;li&gt;when can machines learn?
    &lt;ul&gt;
      &lt;li&gt;The Learning Problem
        &lt;ul&gt;
          &lt;li&gt;what is machine learning?&lt;/li&gt;
          &lt;li&gt;applications of machine learning&lt;/li&gt;
          &lt;li&gt;components of machine learning&lt;/li&gt;
          &lt;li&gt;machine learning and other fields&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Learning to Answer Yes/No
        &lt;ul&gt;
          &lt;li&gt;Perceptron Hypothesis set&lt;/li&gt;
          &lt;li&gt;Perceptron Learning Algorithm(PLA)&lt;/li&gt;
          &lt;li&gt;Guarantee of PLA&lt;/li&gt;
          &lt;li&gt;Non-Separable Data&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Types of Learning
        &lt;ul&gt;
          &lt;li&gt;Learning with Different Output Space Y&lt;/li&gt;
          &lt;li&gt;Learning with Different Data Label&lt;/li&gt;
          &lt;li&gt;Learning with Different Protocol f&lt;/li&gt;
          &lt;li&gt;Learning with Different Input Space X&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Learning is impossible?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;why can machines learn?&lt;/li&gt;
  &lt;li&gt;how can machines learn?&lt;/li&gt;
  &lt;li&gt;how can machines learn better?&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 11 Jan 2016 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2016/01/11/ml-index/</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/01/11/ml-index/</guid>
        
        
      </item>
    
      <item>
        <title>Linux</title>
        <description>&lt;p&gt;vsftpd:
  /etc/vs….conf&lt;/p&gt;

&lt;p&gt;useradd -d /home/ftp&lt;/p&gt;

&lt;p&gt;passwd username
pwd&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Jan 2016 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2016/01/05/linux/</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/01/05/linux/</guid>
        
        
      </item>
    
      <item>
        <title>Docker</title>
        <description>&lt;ol&gt;
  &lt;li&gt;docker理念：创建软件程序可移植的轻量容器&lt;/li&gt;
  &lt;li&gt;docker功能:
    &lt;ul&gt;
      &lt;li&gt;隔离应用依赖&lt;/li&gt;
      &lt;li&gt;创建应用镜像并进行复制&lt;/li&gt;
      &lt;li&gt;创建容易分发的即启即用的应用&lt;/li&gt;
      &lt;li&gt;允许实例简单、快速的扩充&lt;/li&gt;
      &lt;li&gt;测试应用并随后销毁它们&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;docker提供的资源和抽象，两个最重要的概念是镜像和容器
    &lt;ul&gt;
      &lt;li&gt;镜像&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 05 Jan 2016 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2016/01/05/docker/</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/01/05/docker/</guid>
        
        
      </item>
    
      <item>
        <title>Operating system</title>
        <description>&lt;h2 id=&quot;operating-system&quot;&gt;Operating System&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;- virtualize CPU
  - time sharing
  - process
      - machine state
          - memory
          - registers
              - program counter
              - instruction pointer
              - frame pointer
              - stack pointer
      - process api
          - create
          - destroy
          - wait
          - miscellaneous control
          - status
  - question about process
      - how does os get a program up and running?
      - how does process creation actually work?
  - process states
      - Running
      - Ready
      - Blocked
  - mechanism
      - problem: how to perform restricted operations
      - solution: use protected control transfer
          - user mode
          - kernel mode
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Sun, 27 Dec 2015 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2015/12/27/operating-system/</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/12/27/operating-system/</guid>
        
        
      </item>
    
      <item>
        <title>Pythonlearning1</title>
        <description>&lt;h2 id=&quot;python&quot;&gt;python学习&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;学习一门语言，应该知道
    &lt;ul&gt;
      &lt;li&gt;基础数据类型&lt;/li&gt;
      &lt;li&gt;基本的流程控制&lt;/li&gt;
      &lt;li&gt;数据结构&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;尝试写一个程序时，需要知道如何做简单的输入和输出。
    &lt;ul&gt;
      &lt;li&gt;输入
        &lt;ol&gt;
          &lt;li&gt;从文件读取数据&lt;/li&gt;
          &lt;li&gt;从键盘读取数据&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;输出
        &lt;ol&gt;
          &lt;li&gt;将结果显示在屏幕上&lt;/li&gt;
          &lt;li&gt;将结果输出到文件中&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section&quot;&gt;鉴于时间间隔太大，先回忆下自己学过哪些&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;数据类型
    &lt;ul&gt;
      &lt;li&gt;number
        &lt;ul&gt;
          &lt;li&gt;+,-,*,/,//,%&lt;/li&gt;
          &lt;li&gt;**,round&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;string
        &lt;ul&gt;
          &lt;li&gt;index&lt;/li&gt;
          &lt;li&gt;slice&lt;/li&gt;
          &lt;li&gt;+&lt;/li&gt;
          &lt;li&gt;(‘’ ’’)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;数据结构
    &lt;ul&gt;
      &lt;li&gt;del statement&lt;/li&gt;
      &lt;li&gt;list[]
        &lt;ul&gt;
          &lt;li&gt;index&lt;/li&gt;
          &lt;li&gt;slice&lt;/li&gt;
          &lt;li&gt;append = a.[len(a):] = [x]&lt;/li&gt;
          &lt;li&gt;nest list&lt;/li&gt;
          &lt;li&gt;extend = a.[len(a):] = L&lt;/li&gt;
          &lt;li&gt;insert&lt;/li&gt;
          &lt;li&gt;remove&lt;/li&gt;
          &lt;li&gt;pop&lt;/li&gt;
          &lt;li&gt;clear&lt;/li&gt;
          &lt;li&gt;sort&lt;/li&gt;
          &lt;li&gt;reverse&lt;/li&gt;
          &lt;li&gt;copy&lt;/li&gt;
          &lt;li&gt;count&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;tuple()&lt;/li&gt;
      &lt;li&gt;set{}&lt;/li&gt;
      &lt;li&gt;dictionary{,}&lt;/li&gt;
      &lt;li&gt;sequence[]&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;控制语句
    &lt;ul&gt;
      &lt;li&gt;if
        &lt;ul&gt;
          &lt;li&gt;if…elif..else&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;for
        &lt;ul&gt;
          &lt;li&gt;for … in …&lt;/li&gt;
          &lt;li&gt;for i in range(5)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;break,continue&lt;/li&gt;
      &lt;li&gt;else on loops&lt;/li&gt;
      &lt;li&gt;pass&lt;/li&gt;
      &lt;li&gt;define&lt;/li&gt;
      &lt;li&gt;Defining Functions&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;f = open(‘xxx’,’r’);
data = f.read();&lt;/p&gt;

&lt;p&gt;new_data = data.split(‘,’)&lt;/p&gt;
</description>
        <pubDate>Sun, 27 Dec 2015 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2015/12/27/PythonLearning1/</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/12/27/PythonLearning1/</guid>
        
        
      </item>
    
      <item>
        <title>写在看书之前</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;写在看书之前&lt;/h2&gt;
&lt;p&gt;对于技术资料，学习之前头脑里一定要有一个概念，或者说是一个框架，即：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;这部分在讲什么&lt;/li&gt;
  &lt;li&gt;我想知道什么&lt;/li&gt;
  &lt;li&gt;这部分讲解的大致结构是怎样的&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;看书要求：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;有笔，有纸&lt;/li&gt;
  &lt;li&gt;先总览后，画出大致的框架&lt;/li&gt;
  &lt;li&gt;针对每一部分再画出框架&lt;/li&gt;
  &lt;li&gt;经常问自己这块是在讲什么&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;总而言之就是一定知道自己目前在看什么&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Dec 2015 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2015/12/12/%E5%86%99-%E5%9C%A8-%E7%9C%8B-%E4%B9%A6-%E4%B9%8B-%E5%89%8D/</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/12/12/%E5%86%99-%E5%9C%A8-%E7%9C%8B-%E4%B9%A6-%E4%B9%8B-%E5%89%8D/</guid>
        
        <category>随笔</category>
        
        
      </item>
    
      <item>
        <title>一点点想法（1）</title>
        <description>&lt;p&gt;想学ML,又想适当做些项目，其实不矛盾。适当的做项目可以让我很快实现模型，将更多的精力花在思考研究算法上。数学、线代、概率论是基础，即使不是从头啃一遍，但也要经常翻经常看
ML的确看得很痛苦，但只是第一步，坚持下去就好了，加油！&lt;/p&gt;
</description>
        <pubDate>Mon, 27 Jul 2015 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2015/07/27/%E4%B8%80-%E7%82%B9-%E7%82%B9-%E6%83%B3-%E6%B3%95/</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/07/27/%E4%B8%80-%E7%82%B9-%E7%82%B9-%E6%83%B3-%E6%B3%95/</guid>
        
        <category>随笔</category>
        
        
      </item>
    
      <item>
        <title>七月八月书单</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;暑期书单&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;img src=&quot;../img/book/bdiveintopython.jpg&quot; alt=&quot;dive into python3&quot; title=&quot;dive into python3&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;img src=&quot;../img/book/bml.jpg&quot; alt=&quot;机器学习&quot; title=&quot;机器学习&quot; /&gt;&lt;br /&gt;
入门书籍&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;img src=&quot;../img/book/bmla.jpg&quot; alt=&quot;机器学习实战&quot; title=&quot;机器学习实战&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;img src=&quot;../img/book/bmsl.jpg&quot; alt=&quot;统计学习方法&quot; title=&quot;统计学习方法&quot; /&gt;&lt;br /&gt;
与上一本书结合起来看&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;img src=&quot;../img/book/balgorithm.jpg&quot; alt=&quot;算法&quot; title=&quot;算法&quot; /&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;复习&lt;/li&gt;
      &lt;li&gt;做习题&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 16 Jul 2015 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2015/07/16/%E6%9A%91-%E6%9C%9F-%E4%B9%A6-%E5%8D%95/</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/07/16/%E6%9A%91-%E6%9C%9F-%E4%B9%A6-%E5%8D%95/</guid>
        
        <category>书单</category>
        
        
      </item>
    
      <item>
        <title>输入/输出</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;输入/输出&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;文件系统和路径&lt;/li&gt;
  &lt;li&gt;文件和目录的处理及操作&lt;/li&gt;
  &lt;li&gt;输入/输出流&lt;/li&gt;
  &lt;li&gt;读取二进制数据&lt;/li&gt;
  &lt;li&gt;写入二进制数据&lt;/li&gt;
  &lt;li&gt;写入文本&lt;/li&gt;
  &lt;li&gt;读取文本&lt;/li&gt;
  &lt;li&gt;用PrintStream记录日志&lt;/li&gt;
  &lt;li&gt;随机访问文件&lt;/li&gt;
  &lt;li&gt;对象序列化&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-1&quot;&gt;1.文件系统和路径&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;文件系统中的对象可以用一条路径作为惟一的识别&lt;/li&gt;
  &lt;li&gt;路径分为绝对路径和相对路径&lt;/li&gt;
  &lt;li&gt;文件或者目录一般用java.io.File对象表示，java7中，用java.nio.file.Path接口代替它&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;FileSystem类 :&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code&gt;FileSystems.getDefault()&lt;/code&gt;获取当前的文件系统&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;getSeparator()&lt;/code&gt;获取当前系统的分隔符&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;getRootDirectories()&lt;/code&gt;返回一个Iterable,遍历根目录
      &lt;ol&gt;
        &lt;li&gt;创建path&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;FileSystems.getPath(...)&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;Path path = Paths.get(...)&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;getNameCount()&lt;/code&gt;,&lt;code&gt;getName(int index)&lt;/code&gt;从0开始&lt;/li&gt;
        &lt;li&gt;path其他方法&lt;code&gt;getFileName()&lt;/code&gt;,&lt;code&gt;getParent()&lt;/code&gt;,&lt;code&gt;getRoot()&lt;/code&gt;&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;section-2&quot;&gt;2.文件和目录的处理及操作&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;创建和删除文件及目录 &lt;br /&gt;
&lt;code&gt;createFile()&lt;/code&gt;,&lt;code&gt;createDirectory()&lt;/code&gt;,&lt;code&gt;delete()&lt;/code&gt;,&lt;code&gt;deleteIfExists()&lt;/code&gt;,如果用&lt;code&gt;delteIfExists()&lt;/code&gt;删除目录，则目录必须为空&lt;/li&gt;
  &lt;li&gt;获取目录的对象&lt;br /&gt;
使用newDirectoryStream()方法,&lt;code&gt;public static DirectoryStream&amp;lt;Path&amp;gt; newDirectoryStream(Path path)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;p&gt;代码实例：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;	    Path parent = Paths.get(&quot;/home/simple_chen/下载&quot;);
    	try (DirectoryStream&amp;lt;Path&amp;gt; children = Files.newDirectoryStream(parent)){
    	  for (Path child : children) {
       	  System.out.println(child);
          }
        } catch (IOException e) {
         		e.printStackTrace();
        }       ---        
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;复制和文件移动
    &lt;ol&gt;
      &lt;li&gt;复制
    &lt;code&gt;public static Path copy(Path source, Path target, CopyOption...options) throws java.io.IOException&lt;/code&gt; &lt;br /&gt;
    CopyOption是java.nio.file包的一个接口。&lt;code&gt;StandardCopyOption&lt;/code&gt;是CopyOption接口的一个实现。&lt;br /&gt;
    StandardCopyOption有三个复制选项:
        &lt;ul&gt;
          &lt;li&gt;ATOMIC_MOVE&lt;/li&gt;
          &lt;li&gt;COPY_ATTRIBUTES&lt;/li&gt;
          &lt;li&gt;REPLACE_EXISTING&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;移动
&lt;code&gt;public static Path move(Path source, Path target, CopyOption...options) throws java.io.IOException&lt;/code&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;文件读取和写入
 对于较小的文件，File类提供了从二进制文件和文本文件读取和写入的方法
    &lt;ul&gt;
      &lt;li&gt;二进制&lt;br /&gt;
 &lt;code&gt;public static byte[] readAllBytes(Path path) throws java.io.IOException&lt;/code&gt;&lt;br /&gt;
 &lt;code&gt;public static write(Path path, byte[] bytes, OpenOption...options) throws java.io.IOException&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;文本文件&lt;br /&gt;
 &lt;code&gt;public static List&amp;lt;String&amp;gt; readAllLines(Path path, java.nio.charset.Charset charset) throws java.io.IOException&lt;/code&gt;
 &lt;code&gt;public static write(Path path, java.lang.Iterable&amp;lt;? extends CharSequence&amp;gt; lines, java.nio.charset.Charset charset, OpenOption...options) throws java.io.IOException&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;blockquote&gt;
      &lt;p&gt;这两个方法都重载了OpenOption,第二个方法还重载了一个Charset&lt;/p&gt;

      &lt;ul&gt;
        &lt;li&gt;StandardOpenOption实现了OpenOption接口:
          &lt;ul&gt;
            &lt;li&gt;APPEND&lt;/li&gt;
            &lt;li&gt;CREATE&lt;/li&gt;
            &lt;li&gt;CREATE_NEW&lt;/li&gt;
            &lt;li&gt;DELETE_ON_CLOSE&lt;/li&gt;
            &lt;li&gt;DSYNC&lt;/li&gt;
            &lt;li&gt;READ&lt;/li&gt;
            &lt;li&gt;SPARSE&lt;/li&gt;
            &lt;li&gt;SYNC&lt;/li&gt;
            &lt;li&gt;TRUNCATE_EXISTING&lt;/li&gt;
            &lt;li&gt;WRITE&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;

    &lt;blockquote&gt;
      &lt;ul&gt;
        &lt;li&gt;java.nio.charset.Charset是一个表示字符集的抽象类。需要指定在将&lt;strong&gt;字符编码成字节&lt;/strong&gt;和将&lt;strong&gt;字节解码成字符&lt;/strong&gt;时要使用的字符集。
 创建一个charset &lt;br /&gt;
 &lt;code&gt;Charset usAscii = Charset.forName(&quot;US-ASCII&quot;)&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;

    &lt;blockquote&gt;
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;代码实例:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

      &lt;pre&gt;&lt;code&gt; 	Path textfile = Paths.get(&quot;/home/simple_chen/textfile&quot;);
 	Charset charset = Charset.forName(&quot;US-ASCII&quot;);
 	String line1 = &quot;Easy read and write&quot;;
 	String line2 = &quot;Easy read and write&quot;;
 	List&amp;lt;String&amp;gt; lines = Arrays.asList(line1,line2);
 	try {
     	Files.write(textfile,lines,charset);
 	} catch (IOException e) {
     	e.printStackTrace();
 	}  

 	List&amp;lt;String&amp;gt; linesRead = null;
 	try {
     	linesRead = Files.readAllLines(textfile, charset);
 	} catch (IOException e) {
     	e.printStackTrace();
 	}  

 	if(linesRead != null) {
     	for (String str : linesRead) {
         	System.out.println(str);
     	}
 	}	   
&lt;/code&gt;&lt;/pre&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-3&quot;&gt;3. 输入/输出流&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;What is Stream?&lt;br /&gt;
个人理解：用一种统一的方式使的数据在不同的接收装置中传输的机制吧。打个比方，流就是管道，接收装置就是一个个“水库”，而管道将各个水库连接起来。&lt;/li&gt;
  &lt;li&gt;流的分类&lt;br /&gt;
根据数据流向，可分为输入流和输出流，而数据又可以分为二进制数据和字符，因此每种又可分为两种，即：
         - Reader: 从一个接收装置中读取字符的流
         - Writer: 将一个字符写入一个接收装置的流
         - InputStream: 从一个接收装置中读取二进制数据的流
         - OutputStream: 将二进制数据写入到一个接收装置的流&lt;/li&gt;
  &lt;li&gt;流的一般操作顺序：
         1. 创建一个流。得到的对象已经处于打开状态，因此没有open方法可以调用
         2. 执行读取或者写入操作
         3. 通过调用close方法关闭流。由于当前大多数流都实现了java.lang.AutoCloseable接口，因此可以利用try-with-resources语句创建一个流，并且让流自动关闭&lt;/li&gt;
  &lt;li&gt;使用流的好处
 			1. 为数据的读取和写入定义了方法，无论数据源还是数据目标都可以使用。
 			2. 为了连接一个专门的接收装置，利用java.nio.file.Files类提供的方法，正确构造流即可。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-4&quot;&gt;4. 读取二进制数据&lt;/h4&gt;

</description>
        <pubDate>Sat, 04 Jul 2015 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2015/07/04/Java-io/</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/07/04/Java-io/</guid>
        
        <category>Java</category>
        
        
      </item>
    
  </channel>
</rss>
